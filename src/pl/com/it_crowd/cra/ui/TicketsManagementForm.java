package pl.com.it_crowd.cra.ui;

import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import pl.com.it_crowd.cra.model.YoutrackTicketManager;
import pl.com.it_crowd.cra.youtrack.QAFields;
import pl.com.it_crowd.youtrack.api.Filter;
import pl.com.it_crowd.youtrack.api.IssueWrapper;
import pl.com.it_crowd.youtrack.api.defaults.Fields;
import pl.com.it_crowd.youtrack.api.defaults.StateValues;

import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;

public class TicketsManagementForm {
// ------------------------------ FIELDS ------------------------------

    private JButton getTicketsButton;

    private JPanel rootComponent;

    private JTable table;

    private YoutrackTicketManager ticketManager;

    private final TicketModel ticketModel = new TicketModel();

    private final List<IssueWrapper> tickets = new ArrayList<IssueWrapper>();

// --------------------------- CONSTRUCTORS ---------------------------

    public TicketsManagementForm(YoutrackTicketManager ticketManager)
    {
        this.ticketManager = ticketManager;
        $$$setupUI$$$();
        ticketManager.addPropertyChangeListener(YoutrackTicketManager.TICKETS_PROPERTY, new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt)
            {
                synchronized (tickets) {
                    tickets.clear();
                    tickets.addAll(TicketsManagementForm.this.ticketManager.getTickets());
                    ticketModel.tableChanged();
                }
            }
        });
        getTicketsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e)
            {
                try {
                    TicketsManagementForm.this.ticketManager.fetchTickets(Filter.stateFilter(StateValues.Unresolved));
                } catch (Exception ex) {
                    Messages.showWarningDialog(ex.getMessage(), "Problem Fetching Ticket From Youtrack");
                }
            }
        });
    }

// -------------------------- OTHER METHODS --------------------------

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$()
    {
        return rootComponent;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$()
    {
        createUIComponents();
        rootComponent = new JPanel();
        rootComponent.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JToolBar toolBar1 = new JToolBar();
        toolBar1.setFloatable(false);
        rootComponent.add(toolBar1,
            new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(-1, 20), null, 0, false));
        getTicketsButton = new JButton();
        getTicketsButton.setText("Get tickets");
        toolBar1.add(getTicketsButton);
        final JScrollPane scrollPane1 = new JScrollPane();
        rootComponent.add(scrollPane1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(table);
    }

    private void createUIComponents()
    {
        table = new JTable(ticketModel);
        final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(table.getModel());
        table.setRowSorter(sorter);
//        sorter.setRowFilter(RowFilter.andFilter());
    }

// -------------------------- INNER CLASSES --------------------------

    private class TicketModel implements TableModel {
// ------------------------------ FIELDS ------------------------------

        private List<TableModelListener> listeners = new ArrayList<TableModelListener>();

// ------------------------ INTERFACE METHODS ------------------------


// --------------------- Interface TableModel ---------------------

        public int getRowCount()
        {
            return tickets.size();
        }

        public int getColumnCount()
        {
            return 7;
        }

        public String getColumnName(int columnIndex)
        {
            switch (columnIndex) {
                case 0:
                    return "Ticket Id";
                case 1:
                    return "Summary";
                case 2:
                    return "State";
                case 3:
                    return "Assignee";
                case 4:
                    return "Type";
                case 5:
                    return "Revision";
                case 6:
                    return "Rule";
                default:
                    throw new IndexOutOfBoundsException("There is only 7 columns");
            }
        }

        public Class<?> getColumnClass(int columnIndex)
        {
            switch (columnIndex) {
                case 5:
                    return Long.class;
                default:
                    return String.class;
            }
        }

        public boolean isCellEditable(int rowIndex, int columnIndex)
        {
            return false;
        }

        public Object getValueAt(int rowIndex, int columnIndex)
        {
            final IssueWrapper ticket = tickets.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return ticket.getId();
                case 1:
                    return ticket.getFieldValue(Fields.summary);
                case 2:
                    return ticket.getFieldValue(Fields.state);
                case 3:
                    return ticket.getFieldValue(Fields.assignee);
                case 4:
                    return ticket.getFieldValue(QAFields.qaNoteType.getCommand());
                case 5:
                    return ticket.getFieldValue(QAFields.revision.getCommand());
                case 6:
                    return ticket.getFieldValue(QAFields.rule.getCommand());
                default:
                    throw new IndexOutOfBoundsException("There is only 7 columns");
            }
        }

        public void setValueAt(Object aValue, int rowIndex, int columnIndex)
        {
            throw new UnsupportedOperationException();
        }

        public void addTableModelListener(TableModelListener l)
        {
            listeners.add(l);
        }

        public void removeTableModelListener(TableModelListener l)
        {
            listeners.remove(l);
        }

// -------------------------- OTHER METHODS --------------------------

        public void tableChanged()
        {
            ApplicationManager.getApplication().invokeLater(new Runnable() {
                public void run()
                {
                    final TableModelEvent e = new TableModelEvent(TicketModel.this);
                    for (TableModelListener listener : listeners) {
                        listener.tableChanged(e);
                    }
                }
            });
        }
    }
}
